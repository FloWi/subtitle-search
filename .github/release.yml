# https://docs.github.com/en/actions

name: "Release Container and "

on: # yamllint disable-line rule:truthy
  push:
    tags:
      - "**"

jobs:

  build:
    strategy:
      matrix:
        scalaVersion: ["2.13.8"]
    runs-on: ubuntu-20.04

    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      - uses: coursier/cache-action@v6
      - uses: olafurpg/setup-scala@v13

      - name: Build
        run: ./build-prod.sh


  release:
    name: "Release"

    runs-on: "ubuntu-latest"

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Get the version
        id: version
        run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}

      - name: Get image repository
        id: image_repository
        run: echo ::set-output name=IMAGE_REPOSITORY::$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]')

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to ghcr.io
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & Push Docker Image
        uses: docker/build-push-action@v2
        with:
          context: ./docker-dist
          platforms: linux/amd64,linux/arm64
          push: ${{ startsWith(github.ref, 'refs/tags/') }}
          tags: ghcr.io/${{ steps.image_repository.outputs.IMAGE_REPOSITORY }}:${{ steps.version.outputs.VERSION }}, ghcr.io/${{ steps.image_repository.outputs.IMAGE_REPOSITORY }}:latest




#    steps:
#      - name: "Determine tag"
#        run: "echo \"RELEASE_TAG=${GITHUB_REF#refs/tags/}\" >> $GITHUB_ENV"
#
#      - name: "Create release"
#        uses: "actions/github-script@v5"
#        with:
#          github-token: "${{ secrets.ERGEBNIS_BOT_TOKEN }}"
#          script: |
#            try {
#              await github.rest.repos.createRelease({
#                draft: false,
#                generate_release_notes: true,
#                name: process.env.RELEASE_TAG,
#                owner: context.repo.owner,
#                prerelease: false,
#                repo: context.repo.repo,
#                tag_name: process.env.RELEASE_TAG,
#              });
#            } catch (error) {
#              core.setFailed(error.message);
#            }


#name: Release Container
#
#on:
#  push:
#    tags:
#      - "*"
#
#jobs:
#  build:
#    name: Release Container
#    runs-on: ubuntu-latest
